plugins {
  id 'java'
  id 'org.springframework.boot' version '2.7.9'
  id 'io.spring.dependency-management' version '1.0.15.RELEASE'
  id 'io.freefair.lombok' version '8.0.0-rc2'
  id 'com.diffplug.spotless' version '5.17.1'
  id 'jacoco'
}

group 'jp.co.axa'
version '0.0.1-SNAPSHOT'
description 'Demo project for Spring Boot'

repositories {
  mavenCentral()
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
  implementation 'org.springframework.boot:spring-boot-starter-webflux'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.springframework.boot:spring-boot-starter-cache'
  implementation 'org.springframework.boot:spring-boot-starter-data-redis'

  implementation 'org.springdoc:springdoc-openapi-webflux-ui:1.6.15'
  implementation 'org.mapstruct:mapstruct:1.5.3.Final'
  implementation 'com.github.ben-manes.caffeine:caffeine:2.9.3'

  annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.mockito:mockito-core'
  testImplementation 'org.hamcrest:hamcrest'

  runtimeOnly 'io.r2dbc:r2dbc-h2'
}

test {
  useJUnitPlatform()
  finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
  dependsOn test // tests are required to run before generating the report
}

spotless {
  format 'misc', {
    // define the files to apply `misc` to
    target '*.gradle', '*.md', '.gitignore'

    // define the steps to apply to those files
    trimTrailingWhitespace()
    indentWithSpaces(2)
    endWithNewline()
  }
  java {
    // remove unused imports
    removeUnusedImports()
    // apply google-java-format
    googleJavaFormat()
  }
}

jacoco {
  toolVersion = '0.8.8'
  reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport {
  reports {
    xml.required = false
    csv.required = false
    html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
  }
}
jacocoTestCoverageVerification {
  violationRules {
    rule {
      limit {
        minimum = 0.9
      }
    }
  }
}
